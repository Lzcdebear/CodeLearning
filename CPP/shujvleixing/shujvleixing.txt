C++中有很多已经被定义的词语，这些词语不能进行变量的设置

对于标识符，也就是变量等对象的命名的时候的规则

首先标识符不能够是C++定义的词语

只能使用字母 数字 下划线
但是第一个不能是数字

而且在定义的时候大小写是区分的，大小写是不同的对象

之后定义的时候需要定义数据类型，进行内存的分配。
数据类型的存在意义是给变量分配一个合适的内存空间，每个数据类型都是有固定的内存大小，也就是有固定内存空间占用，可以用来节省资源。


整型
short           2字节   -2^15-2^15-1
int             4字节   -2^31-2^31-1
long            windows 4 linux 4（32） 8（64）字节
long long       8字节   -2^63-2^63-1


对于数据类型和变量可以直接使用 size of 进行容量的确定
格式为
        sizeof()；


float 实型 也叫 浮点型


浮点型
float           4字节   7位有效数字
double          8字节   15-16位有效数字
有效数字包括小数点前面的数字


在定义数据的时候可以使用
float f1 = 3.14；
默认3.14是一个double的数据，上面语句会将double转化为float
所以可以使用
float f1 = 3.14f；
来保证3.14在输入的时候默认为float的格式

在打印的时候默认保留6个有效数字
额外的配置需要额外处理


字符型变量使用 char 进行定义
定义的时候的格式是
char ch = ‘a’   单引号内只能由一个数据  只占有一个字节
a = 97
A = 65
char 是将ASCII保存在内存中


以下是一些转义字符
\a      警报
\b      退格，当前位置移动到前一列
\f      换页，将当前位置移动到下一页开头
\n      换行，将当前位置移动到下一行开头
\r      回车，将当前位置移动到本行开头
\t      水平制表，跳到下一个TAB位置
\v      垂直制表
\\      代表一个反斜线字体 \
\'      代表一个单引号，也就是撇号
\"      代表一个双引号
\?      代表一个问号


字符串类型
char 名字[]=""；        和字符型相似，但是使用[]进行定义
string 名字=""；        和char类型一样，都需要用""进行定义
如皋在使用string的时候需要在头文件里面添加
#include <string>


char	                1 个字节	-128 到 127 或者 0 到 255
unsigned char	        1 个字节	0 到 255
signed char	        1 个字节	-128 到 127
int	                4 个字节	-2147483648 到 2147483647
unsigned int	        4 个字节	0 到 4294967295
signed int	        4 个字节	-2147483648 到 2147483647
short int	        2 个字节	-32768 到 32767
unsigned short int	2 个字节	0 到 65,535
signed short int	2 个字节	-32768 到 32767
long int	        8 个字节	-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807
signed long int	        8 个字节	-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807
unsigned long int	8 个字节	0 到 18,446,744,073,709,551,615
float	                4 个字节	精度型占4个字节（32位）内存空间，+/- 3.4e +/- 38 (~7 个数字)
double	                8 个字节	双精度型占8 个字节（64位）内存空间，+/- 1.7e +/- 308 (~15 个数字)
long double	        16 个字节	长双精度型 16 个字节（128位）内存空间，可提供18-19位有效数字。
wchar_t	                2 或 4 个字节	1 个宽字符

在进行变量的定义的时候可以使用typedef来进行变量类型名字的定义
比如
typedef int feet;
进行这个语句之后就可以
feet a = 10
这个语句就是合法的了

不同类型之间可以进行转换

静态转换 static cast
一般用在类型比较相似之间进行转换，比如 int 和 float
但是在转化的时候不会进行任何数据类型的检查，所以可能会出现报错的问题
int i = 10
float f = static_cast<float>(i)

动态转换
动态转换通常用于将一个基类指针或引用转换为派生类指针或引用。
动态转换在运行时进行类型检查
如果不能进行转换则返回空指针或引发异常
class Base {};
class Derived : public Base {};
Base* ptr_base = new Derived;
Derived* ptr_derived = dynamic_cast<Derived*>(ptr_base); // 将基类指针转换为派生类指针

常量转换
一般用在将const对象转化为非const对象
只能用于转化掉const的属性但是不会改变对象的数据类型
const int i = 10;
int& r = const_cast<int&>(i);

重新解释转换
将一个数据类型的值重新解释为另一个数据类型
但不会进行任何数据类型的检查，所以可能会出现未定义的行为
int i = 10;
float f = reinterpret_cast<float&>(i); // 重新解释将int类型转换为float类型

整数类型（Integer Types）：

int：用于表示整数，通常占用4个字节。
short：用于表示短整数，通常占用2个字节。
long：用于表示长整数，通常占用4个字节。
long long：用于表示更长的整数，通常占用8个字节。
浮点类型（Floating-Point Types）：

float：用于表示单精度浮点数，通常占用4个字节。
double：用于表示双精度浮点数，通常占用8个字节。
long double：用于表示更高精度的浮点数，占用字节数可以根据实现而变化。
字符类型（Character Types）：

char：用于表示字符，通常占用1个字节。
wchar_t：用于表示宽字符，通常占用2或4个字节。
char16_t：用于表示16位Unicode字符，占用2个字节。
char32_t：用于表示32位Unicode字符，占用4个字节。
布尔类型（Boolean Type）：

bool：用于表示布尔值，只能取true或false。
枚举类型（Enumeration Types）：

enum：用于定义一组命名的整数常量。
指针类型（Pointer Types）：

type*：用于表示指向类型为type的对象的指针。
数组类型（Array Types）：

type[]或type[size]：用于表示具有相同类型的元素组成的数组。
结构体类型（Structure Types）：

struct：用于定义包含多个不同类型成员的结构。
类类型（Class Types）：

class：用于定义具有属性和方法的自定义类型。
共用体类型（Union Types）：

union：用于定义一种特殊的数据类型，它可以在相同的内存位置存储不同的数据类型。
下面我们将讲解如何定义、声明和使用各种类型的变量。

左值和右值
左值代表的就是内存中数据的名字，也就是变量的名字这个意思
右值代表的就是内存中数据的数值，也就是变量赋予的值的意思

变量的作用域是不同的

main中的变量只在main函数中作用
在main前面定义的变量会影响所有对象，包括其他定义的函数
全局变量会被局部变量覆盖

#include <iostream>
using namespace std

int g = 20;

int main()
{
        int g = 10
        cout << g //将会输出10而不是20
        return 0 
}

在不同的地方输出同一变量也是不一样的
比如说

int a = 10

main()
{
        a = 20
        cout << a
}

cout << a

第一个a输出的值为20
第二个a输出是10

对于C++中的常量中的数字有以下规定

0x123   0x前缀表示十六进制
0123    0表示八进制
212U    U表示无符号整型
212L    L代表长整型
212ul   也是可以代表无符号长整型


对于浮点型常数

3.14159 = 314159E-5

对于布尔型只有 true 和 false


#include <iostream>
#include <string>
using namespace std;

int main() {
    string greeting = "hello, runoob";
    cout << greeting;
    cout << "\n";     // 换行符
    string greeting2 = "hello, \        //这里的\做分隔符
                       runoob";
    cout << greeting2;
    return 0;
}

输出结果
hello, runoob
hello, runoob

+	把两个操作数相加	                       A + B 将得到 30
-	从第一个操作数中减去第二个操作数	         A - B 将得到 -10
*	把两个操作数相乘	                       A * B 将得到 200
/	分子除以分母	                               B / A 将得到 2
%	取模运算符，整除后的余数	                B % A 将得到 0
++	自增运算符，整数值增加 1	                A++ 将得到 11
--	自减运算符，整数值减少 1	                A-- 将得到 9


==	检查两个操作数的值是否相等，如果相等则条件为真。	        (A == B) 不为真。
!=	检查两个操作数的值是否相等，如果不相等则条件为真。	        (A != B) 为真。
>	检查左操作数的值是否大于右操作数的值，如果是则条件为真。	(A > B) 不为真。
<	检查左操作数的值是否小于右操作数的值，如果是则条件为真。	(A < B) 为真。
>=	检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。	 (A >= B) 不为真。
<=	检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。	 (A <= B) 为真。


&&	称为逻辑与运算符。如果两个操作数都 true，则条件为 true。	        (A && B) 为 false。
||	称为逻辑或运算符。如果两个操作数中有任意一个 true，则条件为 true。	 (A || B) 为 true。
!	称为逻辑非运算符。用来逆转操作数的逻辑状态，如果条件为 true 则逻辑非运算符将使其为 false。



p	q	p & q	p | q	p ^ q
0	0	0	0	0
0	1	0	1	1
1	1	1	1	0
1	0	0	1	1
具体运算下来的情况就是
& 都为1则输出1
| 都为0则输出0
^ 两者不一样，即一个为1一个为0则为1

假设如果 A = 60，且 B = 13，现在以二进制格式表示，它们如下所示：

A = 0011 1100
B = 0000 1101

A&B = 0000 1100
A|B = 0011 1101
A^B = 0011 0001
~A  = 1100 0011


运算符	描述	                                                                   实例
=	简单的赋值运算符，把右边操作数的值赋给左边操作数	                        C = A + B 将把 A + B 的值赋给 C
+=	加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数	        C += A 相当于 C = C + A
-=	减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数	        C -= A 相当于 C = C - A
*=	乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数	        C *= A 相当于 C = C * A
/=	除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数	        C /= A 相当于 C = C / A
%=	求模且赋值运算符，求两个操作数的模赋值给左边操作数	                       C %= A 相当于 C = C % A
<<=	左移且赋值运算符	                                                    C <<= 2 等同于 C = C << 2
>>=	右移且赋值运算符	                                                    C >>= 2 等同于 C = C >> 2
&=	按位与且赋值运算符	                                                    C &= 2 等同于 C = C & 2
^=	按位异或且赋值运算符	                                                    C ^= 2 等同于 C = C ^ 2
|=	按位或且赋值运算符	                                                    C |= 2 等同于 C = C | 2

